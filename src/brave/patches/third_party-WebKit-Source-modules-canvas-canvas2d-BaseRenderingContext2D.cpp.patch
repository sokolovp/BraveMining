diff --git a/third_party/WebKit/Source/modules/canvas/canvas2d/BaseRenderingContext2D.cpp b/third_party/WebKit/Source/modules/canvas/canvas2d/BaseRenderingContext2D.cpp
index d74d237ad52dcbf9fa95083e044982336b232f6e..2cdfea9e219134644bea1940025cea165f558812 100644
--- a/third_party/WebKit/Source/modules/canvas/canvas2d/BaseRenderingContext2D.cpp
+++ b/third_party/WebKit/Source/modules/canvas/canvas2d/BaseRenderingContext2D.cpp
@@ -6,9 +6,11 @@
 
 #include "bindings/core/v8/ExceptionMessages.h"
 #include "bindings/core/v8/ExceptionState.h"
+#include "brave/renderer/brave_content_settings_observer_helper.h"
 #include "core/css/cssom/CSSURLImageValue.h"
 #include "core/css/parser/CSSParser.h"
 #include "core/dom/ExecutionContext.h"
+#include "core/frame/LocalDOMWindow.h"
 #include "core/html/HTMLImageElement.h"
 #include "core/html/canvas/HTMLCanvasElement.h"
 #include "core/html/canvas/ImageData.h"
@@ -349,7 +351,12 @@ void BaseRenderingContext2D::setShadowColor(const String& color_string) {
   ModifiableState().SetShadowColor(color.Rgb());
 }
 
-const Vector<double>& BaseRenderingContext2D::getLineDash() const {
+const Vector<double>& BaseRenderingContext2D::getLineDash(ScriptState* script_state) const {
+  static const Vector<double> emptyVector;
+  LocalDOMWindow* window = LocalDOMWindow::From(script_state);
+  if (window && !AllowFingerprinting(window->GetFrame())) {
+    return emptyVector;
+  }
   return GetState().LineDash();
 }
 
@@ -744,16 +751,26 @@ void BaseRenderingContext2D::clip(Path2D* dom_path,
   ClipInternal(dom_path->GetPath(), winding_rule_string);
 }
 
-bool BaseRenderingContext2D::isPointInPath(const double x,
+bool BaseRenderingContext2D::isPointInPath(ScriptState* script_state,
+                                           const double x,
                                            const double y,
                                            const String& winding_rule_string) {
+  LocalDOMWindow* window = LocalDOMWindow::From(script_state);
+  if (window && !AllowFingerprinting(window->GetFrame())) {
+    return false;
+  }
   return IsPointInPathInternal(path_, x, y, winding_rule_string);
 }
 
-bool BaseRenderingContext2D::isPointInPath(Path2D* dom_path,
+bool BaseRenderingContext2D::isPointInPath(ScriptState* script_state,
+                                           Path2D* dom_path,
                                            const double x,
                                            const double y,
                                            const String& winding_rule_string) {
+  LocalDOMWindow* window = LocalDOMWindow::From(script_state);
+  if (window && !AllowFingerprinting(window->GetFrame())) {
+    return false;
+  }
   return IsPointInPathInternal(dom_path->GetPath(), x, y, winding_rule_string);
 }
 
@@ -778,13 +795,22 @@ bool BaseRenderingContext2D::IsPointInPathInternal(
                        SkFillTypeToWindRule(ParseWinding(winding_rule_string)));
 }
 
-bool BaseRenderingContext2D::isPointInStroke(const double x, const double y) {
+bool BaseRenderingContext2D::isPointInStroke(ScriptState* script_state, const double x, const double y) {
+  LocalDOMWindow* window = LocalDOMWindow::From(script_state);
+  if (window && !AllowFingerprinting(window->GetFrame())) {
+    return false;
+  }
   return IsPointInStrokeInternal(path_, x, y);
 }
 
-bool BaseRenderingContext2D::isPointInStroke(Path2D* dom_path,
+bool BaseRenderingContext2D::isPointInStroke(ScriptState* script_state,
+                                             Path2D* dom_path,
                                              const double x,
                                              const double y) {
+  LocalDOMWindow* window = LocalDOMWindow::From(script_state);
+  if (window && !AllowFingerprinting(window->GetFrame())) {
+    return false;
+  }
   return IsPointInStrokeInternal(dom_path->GetPath(), x, y);
 }
 
@@ -1539,11 +1565,14 @@ ImageData* BaseRenderingContext2D::createImageData(
 }
 
 ImageData* BaseRenderingContext2D::getImageData(
+    ScriptState* script_state,
     int sx,
     int sy,
     int sw,
     int sh,
     ExceptionState& exception_state) {
+  LocalDOMWindow* window = LocalDOMWindow::From(script_state);
+  if (window && !AllowFingerprinting(window->GetFrame())) return nullptr;
   if (!WTF::CheckMul(sw, sh).IsValid<int>()) {
     exception_state.ThrowRangeError("Out of memory at ImageData creation");
     return nullptr;
